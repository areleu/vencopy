__author__ = "Niklas Wulff"
__email__ = "Niklas.Wulff@dlr.de"
__birthdate__ = "23.01.2023"
__status__ = "dev"  # options are: dev, test, prod
__license__ = "BSD-3-Clause"


# ----- imports & packages ------
if __package__ is None or __package__ == "":
    import sys
    from os import path

    sys.path.append(path.dirname(path.dirname(__file__)))

from pathlib import Path
import matplotlib.pyplot as plt
from vencopy.core.dataParsers import ParseMiD
from vencopy.utils.globalFunctions import loadConfigDict

basePath = Path(__file__).parent.parent
configNames = ("globalConfig", "localPathConfig", "parseConfig", "diaryConfig",
               "gridConfig", "flexConfig", "aggregatorConfig", "evaluatorConfig")
configDict = loadConfigDict(configNames, basePath)
vpData = ParseMiD(configDict=configDict, datasetID='MiD17', debug=False)
vpData.process()


# DEFINITION OF DONE 1: timestampStart and timestampEnd variable histograms contain no obvious contradictions against the
# intuition of more day vs. inght mobilityt (e.g. many boundary 00:00 or 23:00 observations)

act = vpData.activities
tsStart_workday = act.loc[(~act['tripID'].isna()) & (act['tripStartWeekday'].isin(range(6))),
                          'timestampStart'].dt.hour * 60 + act.loc[
    (~act['tripID'].isna()) & (act['tripStartWeekday'].isin(range(6))), 'timestampStart'].dt.minute
tsStart_workday.plot.hist(bins=24)

tsStart_weekend = act.loc[(~act['tripID'].isna()) & (act['tripStartWeekday'].isin([6, 7])),
                          'timestampStart'].dt.hour * 60 + act.loc[
    (~act['tripID'].isna()) & (act['tripStartWeekday'].isin([6, 7])), 'timestampStart'].dt.minute
tsStart_weekend.plot.hist(bins=24)


tsEnd_workday = act.loc[(~act['tripID'].isna()) & (act['tripStartWeekday'].isin(range(6))),
                        'timestampStart'].dt.hour * 60 + act.loc[
    (~act['tripID'].isna()) & (act['tripStartWeekday'].isin(range(6))), 'timestampStart'].dt.minute
tsEnd_workday.plot.hist(bins=24)

tsEnd_weekend = act.loc[(~act['tripID'].isna()) & (act['tripStartWeekday'].isin([6, 7])),
                        'timestampEnd'].dt.hour * 60 + act.loc[
    (~act['tripID'].isna()) & (act['tripStartWeekday'].isin([6, 7])), 'timestampEnd'].dt.minute
tsEnd_weekend.plot.hist(bins=24)

plt.show()


# DEFINITION OF DONE 2: Sum of all trip distances at the end equals sum of all distances after filtering.
# Just an idea wasnt tested
vpData.data['tripDistance'].sum() == vpData.activities.loc[~vpData.data['tripID'].isna(), 'tripDistance'].sum()
